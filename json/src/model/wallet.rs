// SPDX-License-Identifier: CC0-1.0

//! Types for methods found under the `== Wallet ==` section of the API docs.
//!
//! These structs model the types returned by the JSON-RPC API but have concrete types
//! and are not specific to a specific version of Bitcoin Core.

use bitcoin::{Address, Amount, SignedAmount, Transaction, Txid};
use serde::{Deserialize, Serialize};

/// The purpose of an address.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub enum AddressPurpose {
    /// A send-to address.
    Send,
    /// A receive-from address.
    Receive,
}

/// The category of a transaction.
#[derive(Copy, Clone, PartialEq, Eq, Debug, Deserialize, Serialize)]
pub enum TransactionCategory {
    /// Transaction is a send.
    Send,
    /// Transactions is a receive.
    Receive,
}

/// Whether this transaction can be RBF'ed.
#[derive(Copy, Clone, PartialEq, Eq, Debug, Deserialize, Serialize)]
pub enum Bip125Replacable {
    /// Yes, can be replaced due to BIP-125 (RBF).
    Yes,
    /// No, cannot be replaced due to BIP-125 (RBF).
    No,
    /// RBF unknown.
    Unknown,
}

/// Models the result of JSON-RPC method `addmultisigaddress`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct AddMultisigAddress {
    /// The new multisig address.
    pub address: Address,
    /// The redemption script.
    pub redeem_script: ScriptBuf,
}

/// Models the result of JSON-RPC method `bumpfee`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct BumpFee {
    /// The id of the new transaction.
    pub txid: Txid,
    /// Fee of the replaced transaction.
    pub original_fee: Amount,
    /// Fee of the new transaction.
    pub fee: Amount,
    /// Errors encountered during processing (may be empty).
    pub errors: Vec<String>,
}

/// Models the result of JSON-RPC method `createwallet`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct CreateWallet {
    /// The wallet name if created successfully.
    ///
    /// If the wallet was created using a full path, the wallet_name will be the full path.
    pub name: String,
    /// Warning messages, if any, related to creating and loading the wallet.
    pub warnings: Vec<String>,
}

/// Models the result of JSON-RPC method `dumpprivkey`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct DumpPrivKey {
    /// The private key.
    pub key: PrivateKey,
}

/// Models the result of JSON-RPC method `getaddressbylabel`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct GetAddressesByLabel {
    /// Map of address to information about address.
    pub addresses: BTreeMap<Address, Purpose>,
}

/// Models the result of JSON-RPC method `getaddressinfo`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct GetAddressInfo {
    /// The bitcoin address validated.
    pub address: Address,
    /// The hex encoded scriptPubKey generated by the address.
    pub script_pubkey: ScriptBuf,
    /// If the address is yours or not.
    pub is_mine: bool,
    /// If the address is watchonly.
    pub is_watch_only: bool,
    /// If the key is a script.
    pub is_script: bool,
    /// If the address is a witness address.
    pub is_witness: bool,
    /// The version number of the witness program.
    pub witness_version: Option<WitnessVersion>,
    /// The hex value of the witness program.
    pub witness_program: Option<WitnessProgram>,
    /// The output script type.
    ///
    /// Only if "is_script" is true and the redeemscript is known.
    pub script: Option<ScriptType>,
    /// The redeemscript for the p2sh address.
    // TODO: Should we rename this to redeem_script?
    pub hex: Optional<ScriptBuf>,
    /// Array of pubkeys associated with the known redeemscript (only if "script" is "multisig").
    pub pubkeys: Vec<PublicKey>
    /// Number of signatures required to spend multisig output (only if "script" is "multisig").
    pub sigs_required: Option<u32>,
    /// The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH).
    pub pubkey: Option<PublicKey>,
    /// Information about the address embedded in P2SH or P2WSH, if relevant and known.
    pub embedded: Option<GetAddressInfoEmbedded>,
    /// If the address is compressed.
    pub is_compressed: bool,
    /// The label associated with the address, "" is the default account.
    pub label: String,
    /// The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT).
    pub timestamp: Option<u32>,
    /// The HD keypath if the key is HD and available.
    pub hd_key_path: Option<bip32::DerivationPath>,
    /// The Hash160 of the HD seed.
    pub hd_seed_id: Option<hash160::Hash>,
    /// Labels associated with the address.
    pub labels: Vec<AddressLabel>,
}

/// An address script type.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub enum ScriptType {
    /// Non-standard output script type.
    NonStandard,
    /// Pubkey output script.
    Pubkey,
    /// Pubkey hash output script.
    PubkeyHash,
    /// Script hash output script.
    ScriptHash,
    /// Multisig output script.
    Multisig,
    /// Null data for output script.
    NullData,
    /// Witness version 0 key hash output script.
    WitnessV0KeyHash,
    /// Witness version 0 script hash output script.
    WitnessV0ScriptHash,
    /// Witness unknown for output script.
    WitnessUnknown,
}

/// An address label.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct AddressLabel {
    /// The address label.
    pub name: String,
    /// Purpose of address (send or receive).
    pub purpose: Purpose,
}

/// The `embedded` field of `GetAddressInfo`.
///
/// It includes all getaddressinfo output fields for the embedded address, excluding metadata
/// ("timestamp", "hdkeypath", "hdseedid") and relation to the wallet ("ismine", "iswatchonly",
/// "account").
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct GetAddressInfoEmbedded {
    /// The bitcoin address validated.
    pub address: Address,
    /// The hex encoded scriptPubKey generated by the address.
    pub script_pubkey: ScriptBuf,
    /// If the key is a script.
    pub is_script: bool,
    /// If the address is a witness address.
    pub is_witness: bool,
    /// The version number of the witness program.
    pub witness_version: Option<WitnessVersion>,
    /// The hex value of the witness program.
    pub witness_program: Option<WitnessProgram>,
    /// The output script type.
    ///
    /// Only if "is_script" is true and the redeemscript is known.
    pub script: Option<ScriptType>,
    /// The redeemscript for the p2sh address.
    pub hex: Optional<ScriptBuf>,
    /// Array of pubkeys associated with the known redeemscript (only if "script" is "multisig").
    pub pubkeys: Vec<PublicKey>
    /// Number of signatures required to spend multisig output (only if "script" is "multisig").
    pub sigs_required: Option<u32>,
    /// The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH).
    pub pubkey: Option<PublicKey>,
    /// Information about the address embedded in P2SH or P2WSH, if relevant and known.
    pub embedded: Option<GetAddressInfoEmbedded>,
    /// If the address is compressed.
    pub is_compressed: bool,
    /// The label associated with the address, "" is the default account.
    pub label: String,
    /// Labels associated with the address.
    pub labels: Vec<AddressLabel>,
}

/// Models the result of JSON-RPC method `getbalance`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetBalance(pub Amount);

/// Models the result of JSON-RPC method `getnewaddress`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetNewAddress(pub Address);

/// Models the result of JSON-RPC method `getrawchangeaddress`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetRawChangeAddress(pub Address);

/// Models the result of JSON-RPC method `getreceivedbyaddress`.
pub struct GetReceivedByAddress(pub Amount);

/// Models the result of JSON-RPC method `gettransaction`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetTransaction {
    /// The transaction amount.
    #[serde(default, with = "bitcoin::amount::serde::as_btc")]
    pub amount: Amount,
    /// The amount of the fee.
    ///
    /// This is negative and only available for the 'send' category of transactions.
    #[serde(default, with = "bitcoin::amount::se
rde::as_btc::opt")]
    pub fee: Option<SignedAmount>,
    /// The number of confirmations.
    pub confirmations: u32,
    /// The block hash.
    pub block_hash: Option<String>,
    /// The index of the transaction in the block that includes it.
    pub block_index: Option<u32>,
    /// The time in seconds since epoch (1 Jan 1970 GMT).
    pub block_time: u32,
    /// The transaction id.
    pub txid: Txid,
    /// The transaction time in seconds since epoch (1 Jan 1970 GMT).
    pub time: u32,
    /// The time received in seconds since epoch (1 Jan 1970 GMT).
    pub time_received: u32,
    /// Whether this transaction could be replaced due to BIP125 (replace-by-fee);
    /// may be unknown for unconfirmed transactions not in the mempool
    pub bip125_replaceable: Bip125Replacable,
    /// Transaction details.
    pub details: Vec<GetTransactionDetail>,
    /// The transaction, parsed from hex string.
    pub tx: Transaction,
}

/// Part of the `GetTransaction`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetTransactionDetail {
    /// The bitcoin address involved in the transaction.
    pub address: Address,
    /// The category, either 'send' or 'receive'.
    pub category: TransactionCategory,
    ///  The amount.
    #[serde(default, with = "bitcoin::amount::serde::as_btc")]
    pub amount: SignedAmount,
    /// A comment for the address/transaction, if any.
    pub label: Option<String>,
    /// the vout value.
    pub vout: u32,
    /// The amount of the fee.
    ///
    /// This is negative and only available for the 'send' category of transactions.
    #[serde(default, with = "bitcoin::amount::serde::as_btc::opt")]
    pub fee: Option<SignedAmount>,
    /// If the transaction has been abandoned (inputs are respendable).
    ///
    /// Only available for the 'send' category of transactions.
    pub abandoned: Option<bool>,
}

/// Enum to represent the category of a transaction.
#[derive(Copy, Clone, PartialEq, Eq, Debug, Deserialize, Serialize)]
pub enum TransactionCategory {
    Send,
    Receive,
}

/// Models the result of JSON-RPC method `getunconfirmedbalance`.
pub struct GetUnconfirmedBalance(pub Amount);

/// Models the result of JSON-RPC method `getwalletinfo`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetWalletInfo {
    /// The wallet name.
    pub wallet_name: String,
    /// The wallet version.
    pub wallet_version: u32,
    /// The total confirmed balance of the wallet in BTC.
    pub balance: Amount,
    /// The total unconfirmed balance of the wallet in BTC.
    pub unconfirmed_balance: Amount,
    /// The total immature balance of the wallet in BTC.
    pub immature_balance: Amount,
    /// The total number of transactions in the wallet
    pub tx_count: u32,
    /// The timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool.
    pub keypool_oldest: u32,
    /// How many new keys are pre-generated (only counts external keys).
    pub keypool_size: u32,
    /// How many new keys are pre-generated for internal use (used for change outputs, only appears
    /// if the wallet is using this feature, otherwise external keys are used).
    pub keypool_size_hd_internal: u32,
    /// The timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked
    /// for transfers, or 0 if the wallet is locked.
    pub unlocked_until: u32,
    /// The transaction fee configuration.
    pub pay_tx_fee: FeeRate,
    /// The Hash160 of the HD seed (only present when HD is enabled).
    pub hd_seed_id: Option<hash160::Hash>,
    /// If privatekeys are disabled for this wallet (enforced watch-only wallet).
    pub private_keys_enabled: bool,
}

/// Models the result of JSON-RPC method `listaddressgroupings`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListAddressGroupings(pub Vec<Vec<ListAddressGroupingsItem>>);

/// List item type returned as part of `listaddressgroupings`.
// FIXME: The Core docs seem wrong, not sure what shape this should be?
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListAddressGroupingsItem {
    /// The bitcoin address.
    pub address: Address,
    /// The amount.
    pub amount: Amount,
    /// The label.
    pub label: Option<String>,
}

/// Models the result of JSON-RPC method `listlabels`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListLabels(pub Vec<String>);

/// Models the result of JSON-RPC method `listlockunspent`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListLockUnspentItem {
    /// The transaction id locked.
    pub txid: Txid,
    /// The vout value.
    pub vout: u32,
}

/// Models the result of JSON-RPC method `listreceivedbyaddress`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListReceivedbyAddress(pub Vec<ListReceivedbyAddressItem>);

/// List item returned as part of of `listreceivedbyaddress`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ListReceivedbyAddressItem {
    /// Only returned if imported addresses were involved in transaction.
    pub involves_watch_only: bool,
    /// The receiving address.
    pub address: Address,
    /// The total amount received by the address.
    pub amount: Amount,
    /// The number of confirmations of the most recent transaction included.
    pub confirmations: u32,
    /// The label of the receiving address. The default label is "".
    pub label: String,
    /// The ids of transactions received with the address.
    pub txids: Vec<Txid>,
}

/// Models the result of JSON-RPC method `listsinceblock`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct ListSinceBlock {
    /// All the transactions.
    pub transactions: Vec<ListSinceBlockTransaction>,
    /// Only present if `include_removed=true`.
    ///
    /// Note: transactions that were re-added in the active chain will appear as-is in this array,
    /// and may thus have a positive confirmation count.
    pub removed: Vec<ListSinceBlockTransaction>,
    /// The hash of the block (target_confirmations-1) from the best block on the main chain.
    ///
    /// This is typically used to feed back into listsinceblock the next time you call it. So you
    /// would generally use a target_confirmations of say 6, so you will be continually
    /// re-notified of transactions until they've reached 6 confirmations plus any new ones.
    pub last_block: String,
}

/// Transaction list item, part of `ListSinceBlock`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct ListSinceBlockTransaction {
    /// The bitcoin address of the transaction.
    pub address: Option<Address>,
    /// The transaction category.
    pub category: TransactionCategory,
    /// The amount in BTC.
    ///
    /// This is negative for the 'send' category, and for the 'move' category for moves outbound. It
    /// is positive for the 'receive' category, and for the 'move' category for inbound funds.
    pub amount: SignedAmount,
    /// The vout value.
    pub vout: u32,
    /// The amount of the fee in BTC.
    ///
    /// This is negative and only available for the 'send' category of transactions.
    pub fee: SignedAmount,
    /// The number of confirmations for the transaction.
    ///
    /// Available for 'send' and 'receive' category of transactions. When it's < 0, it means the
    /// transaction conflicted that many blocks ago.
    pub confirmations: u32,
    /// The block hash containing the transaction.
    ///
    /// Available for 'send' and 'receive' category of transactions.
    pub block_hash: BlockHash,
    /// The index of the transaction in the block that includes it.
    ///
    /// Available for 'send' and 'receive' category of transactions.
    pub block_index: u32,
    /// The block time in seconds since epoch (1 Jan 1970 GMT).
    pub block_time: u32,
    /// The transaction id.
    ///
    /// Available for 'send' and 'receive' category of transactions.
    pub txid: Option<Txid>,
    /// The transaction time in seconds since epoch (Jan 1 1970 GMT).
    pub time: u32,
    /// The time received in seconds since epoch (Jan 1 1970 GMT).
    ///
    /// Available for 'send' and 'receive' category of transactions.
    pub time_received: u32,
    /// Whether this transaction could be replaced due to BIP125 (replace-by-fee);
    /// may be unknown for unconfirmed transactions not in the mempool
    pub bip125_replaceable: Bip125Replacable,
    /// If the transaction has been abandoned (inputs are respendable).
    ///
    /// Only available for the 'send' category of transactions.
    pub abandoned: Option<bool>,
    /// If a comment is associated with the transaction.
    pub comment: Option<String>,
    /// A comment for the address/transaction, if any.
    pub label: Option<String>,
    /// If a comment to is associated with the transaction.
    pub to: Option<String>,
}

/// Models the result of JSON-RPC method `listtransactions`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct ListTransactions(pub Vec<ListTransactionsItem>);

/// Transaction list item, part of `ListTransactions`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct ListTransactionsItem {
    /// The bitcoin address of the transaction.
    pub address: Address,
    /// The transaction category.
    pub category: TransactionCategory,
    /// The amount.
    ///
    /// This is negative for the 'send' category, and is positive for the 'receive' category.
    pub amount: SignedAmount,
    /// A comment for the address/transaction, if any.
    pub label: Option<String>,
    /// The vout value.
    pub vout: u32,
    /// The amount of the fee in BTC.
    ///
    /// This is negative and only available for the 'send' category of transactions.
    pub fee: SignedAmount,
    /// The number of confirmations for the transaction.
    ///
    /// Negative confirmations indicate the transaction conflicts with the block chain.
    pub confirmations: u32,
    /// Whether we consider the outputs of this unconfirmed transaction safe to spend.
    pub trusted: bool,
    /// The block hash containing the transaction.
    pub block_hash: BlockHash,
    /// The index of the transaction in the block that includes it.
    pub block_index: u32,
    /// The block time in seconds since epoch (1 Jan 1970 GMT).
    pub block_time: u32,
    /// The transaction id.
    pub txid: Txid,
    /// The transaction time in seconds since epoch (Jan 1 1970 GMT).
    pub time: u32,
    /// The time received in seconds since epoch (Jan 1 1970 GMT).
    pub time_received: u32,
    /// If a comment is associated with the transaction.
    pub comment: Option<String>,
    /// Whether this transaction could be replaced due to BIP125 (replace-by-fee);
    /// may be unknown for unconfirmed transactions not in the mempool
    pub bip125_replaceable: Bip125Replacable,
    /// If the transaction has been abandoned (inputs are respendable).
    ///
    /// Only available for the 'send' category of transactions.
    pub abandoned: Option<bool>,
}

// TODO: Upto here

/// Models the result of JSON-RPC method `loadwallet`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct LoadWallet {
    /// The wallet name if loaded successfully.
    pub name: String,
    /// Warning messages, if any, related to loading the wallet.
    pub warnings: Vec<String>,
}

/// Models the result of JSON-RPC method `unloadwallet`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct UnloadWallet {
    /// Warning messages, if any, related to unloading the wallet.
    pub warnings: Vec<String>,
}

/// Models the result of JSON-RPC method `getbalances`.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetBalances {
    /// Balances from outputs that the wallet can sign.
    pub mine: GetBalancesMine,
    pub watch_only: Option<GetBalancesWatchOnly>,
}

/// Balances from outputs that the wallet can sign.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetBalancesMine {
    /// Trusted balance (outputs created by the wallet or confirmed outputs).
    pub trusted: Amount,
    /// Untrusted pending balance (outputs created by others that are in the mempool).
    pub untrusted_pending: Amount,
    /// Balance from immature coinbase outputs.
    pub immature: Amount,
    /// Balance from coins sent to addresses that were previously spent from (potentially privacy violating).
    ///
    /// Only present if `avoid_reuse` is set.
    pub used: Option<Amount>,
}

/// Hash and height of the block this information was generated on.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetBalancesWatchOnly {
    /// Trusted balance (outputs created by the wallet or confirmed outputs).
    pub trusted: Amount,
    /// Untrusted pending balance (outputs created by others that are in the mempool).
    pub untrusted_pending: Amount,
    /// Balance from immature coinbase outputs.
    pub immature: Amount,
}

/// Models the result of JSON-RPC method `sendtoaddress`.
#[derive(Clone, Debug, PartialEq, Eq, Deserialize, Serialize)]
pub struct SendToAddress {
    /// The transaction id.
    pub txid: Txid,
}
